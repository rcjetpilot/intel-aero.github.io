{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Intel Aero Platform\n\n\n\n  \n\n      \n\n  \n\n  \n\n      \n\n  \n\n\n\n\n\n\n\n\nIntel Aero is a set of components to help drone developers and integrators\nto have a platform to build upon. It is composed of:\n\n\n\n\nReady-To-Fly Kit (RTF)\n\n\nIntel Aero Compute Board\n\n\nVision Accessory Kit\n\n\nEnclosure Kit\n\n\n\n\nHere you can find more information about the hardware, software and how\nto use each of these components.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#welcome-to-intel-aero-platform", 
            "text": "Intel Aero is a set of components to help drone developers and integrators\nto have a platform to build upon. It is composed of:   Ready-To-Fly Kit (RTF)  Intel Aero Compute Board  Vision Accessory Kit  Enclosure Kit   Here you can find more information about the hardware, software and how\nto use each of these components.", 
            "title": "Welcome to Intel Aero Platform"
        }, 
        {
            "location": "/getting-started/power-on/", 
            "text": "Compute Board\n\n\nThe Intel Aero Compute Board is powered by its side connector with a power\nsupply that should meet the following specification:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVoltage\n\n\n5V DC\n\n\n\n\n\n\nCurrent\n\n\n3A (min 15W)\n\n\n\n\n\n\n\n\nAn adapter cable with barrel connector if 5.5mm (OD) x 2.1mm (OD) is supplied\nwith the kit in order to connect to common power supplies available in the\nmarket. See the diagram below for recommended connection.\n\n\n\n\nFor complete pinout and alternative adapter cables consult the Hardware\nsection.\n\n\nRTF\n\n\nThe RTF Kit comes with a power distribution board that's already connected to\nCompute Board's power connector. It needs to be powered by connecting a LiPo\nbattery with the following specification:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnector\n\n\nXT60\n\n\n\n\n\n\nCells\n\n\n3S or 4S\n\n\n\n\n\n\nCapacity\n\n\n4000 mAh (lasts about 21min hovering)\n\n\n\n\n\n\nSize\n\n\n150 x 50 x 32mm (max)\n\n\n\n\n\n\n\n\nMost LiPo batteries require a LiPo charger-balancer. Some \"smart batteries\"\nhave a cell balancer included and only require a power adapter. Make sure\nthey are provided with the connector above.\n\n\n\n\nWarning\n\n\nLiPo batteries are very dense in energy and can be dangerous is not handled\nproperly. If you are not already a RC Hobbyist, then working with a\nprofessional or joining a RC club may be a good idea.\n\n\n\n\n\n\nWarning\n\n\nIn case you plan to take your drone with you on a commercial flight be\naware that airlines have strict rules regarding the transportation of LiPo\nbatteries.\n\n\n\n\nThe power button on the power distribution board should be firmly pressed until\nthe LEDs next to it are on. This is usually a fraction of a second. If pressed and\nreleased too early it's normal that it will not work.", 
            "title": "Power On"
        }, 
        {
            "location": "/getting-started/power-on/#compute-board", 
            "text": "The Intel Aero Compute Board is powered by its side connector with a power\nsupply that should meet the following specification:           Voltage  5V DC    Current  3A (min 15W)     An adapter cable with barrel connector if 5.5mm (OD) x 2.1mm (OD) is supplied\nwith the kit in order to connect to common power supplies available in the\nmarket. See the diagram below for recommended connection.   For complete pinout and alternative adapter cables consult the Hardware\nsection.", 
            "title": "Compute Board"
        }, 
        {
            "location": "/getting-started/power-on/#rtf", 
            "text": "The RTF Kit comes with a power distribution board that's already connected to\nCompute Board's power connector. It needs to be powered by connecting a LiPo\nbattery with the following specification:           Connector  XT60    Cells  3S or 4S    Capacity  4000 mAh (lasts about 21min hovering)    Size  150 x 50 x 32mm (max)     Most LiPo batteries require a LiPo charger-balancer. Some \"smart batteries\"\nhave a cell balancer included and only require a power adapter. Make sure\nthey are provided with the connector above.   Warning  LiPo batteries are very dense in energy and can be dangerous is not handled\nproperly. If you are not already a RC Hobbyist, then working with a\nprofessional or joining a RC club may be a good idea.    Warning  In case you plan to take your drone with you on a commercial flight be\naware that airlines have strict rules regarding the transportation of LiPo\nbatteries.   The power button on the power distribution board should be firmly pressed until\nthe LEDs next to it are on. This is usually a fraction of a second. If pressed and\nreleased too early it's normal that it will not work.", 
            "title": "RTF"
        }, 
        {
            "location": "/getting-started/update/", 
            "text": "Update Intel Aero software\n\n\nThe Intel Aero Compute Board and the RTF Kit comes already flashed from factory\nand ready to use. The version may vary and it's recommended for developers to\nupdate to the last available version.\n\n\nThere are 4 main components that may need to be updated:\nOperating System, BIOS, FPGA, Flight Controller (aerofc).\n\n\nCheck current version\n\n\nIn order to know what needs to be updated you may check what's already\ncurrently installed on your board. Connect to the board via WiFi or USB\nand use the following command on the terminal:\n\n\n#\n aero-get-version.py\n\nBIOS_VERSION = Aero-01.00.12_Prod\n\n\nOS_VERSION = v1.4\n\n\nAIRMAP_VERSION = 1.8\n\n\nFPGA_VERSION = 0xc0\n\n\n\n\n\n\nThis should show the 3 important versions: OS, BIOS and FPGA. The flight\ncontroller currently doesn't report its version this way.\n\n\nDownload\n\n\nThe last software version can be downloaded from\n\nIntel's Download Center\n.\nYou will need to download the \"Operating system image\" and the \"Capsule/BIOS\"\nfrom that page.\n\n\n\n\nTip\n\n\nThe Operating system image is updated much more frequently than the BIOS.\nIf you already have the last BIOS flashed you don't need to download and\nflash it again. See \nCheck current version\n for instructions on how to check version\ncurrently installed.\n\n\n\n\nAs of this writting the OS Image is at version 1.4 and the BIOS at version\n1.00.12. After downloading it's advised to check if the download was successful\nby checking its md5sum. It must match the md5sum published on the Download Center.\n\n\nCheck md5sum\n\n\nLinux and macOS\n\n\nOpen a terminal and execute the following command below. The md5sum can be seen\nin the line following it.\n\n\n$\n md5sum ~/Downloads/intel-aero-image-1.4.iso\n\n9a1706addd08eb8bea3a4e6dbc58b724 /home/\nuser\n/Downloads/intel-aero-image-1.4.iso\n\n\n\n\n\n\nThe command above assumes the download has been done to your Downloads directory,\nwhich is usually the default location but may vary across distros.\n\n\nWindows\n\n\nYou will need to download and install \nWin32 Disk Imager\n.\nThis software can also be used later below if you are following the Windows-specific\ninstructions. See picture below that contains the \"MD5 hash\" for an earlier\nversion of the OS image.\n\n\n\n\nWrite OS image to USB drive\n\n\nThe method to write the image to the USB drive will depend on what Operating\nSystem you are using. Below you can find options that work on each of Linux,\nWindows and macOS.\n\n\nLinux, Windows and macOS\n\n\nFollow these steps:\n\n\n\n\nDownload and install \nEtcher\n. follow specific instructions\n  on their website for installation\n\n\nLaunch Etcher\n\n\nSelect the downloaded OS image file\n\n\nSelect the USB drive where it will be written to\n\n\nClick on \"Flash\" button\n\n\n\n\nWait for the image to be written and verified.\n\n\nLinux and macOS \n(alternative)\n\n\nIt's possible to use the command line to write the image to a USB drive as\nbelow. Note that the letter \nX\n below should be replaced by the letter of\nyour USB drive (be careful not to use the wrong drive since it can overwrite\nyour main disk).\n\n\ndd \nif\n=\n~/Downloads/intel-aero-image-1.4.iso \nof\n=\n/dev/sdX \nbs\n=\n1M\n\n\n\n\n\nWindows \n(alternative)\n\n\nIf you are using this method, you need to use Win32 Disk Imager\nas detailed in \nCheck md5sum\n section. After checking the\ndownload is correct proceed with the following steps:\n\n\n\n\nSelect your USB drive\n\n\nClick on \"Write\" button\n\n\n\n\nFlash OS image\n\n\nIn order to flash a new OS image you can connect to it either via\nWiFi or USB. Since the USB port will be needed to connect the USB drive\nit's recommended to use WiFi though. Follow the instructions on \nXXXXX\n to\nconnect establish the network connection and connect via ssh. The commands\nbelow assume you are already connected to the Compute Board.\n\n\nBased on the version you \ncurrently\n have installed on the Compute Board the\nmethod varies since recent versions are always improving the process.\n\n\nv1.2 (or greater) via WiFi\n\n\nJust one command is needed:\n\n\n#\n aero-reboot-update.py\n\n\n\n\n\nThis will verify you have a new OS image on the USB drive and reboot in update\nmode.\n\n\nv1.2 (or greater) via USB\n\n\nIf you are connected via USB you have to bypass the check done by the command\non the previous section since the USB is being used for usb-ethernet connection:\n\n\n#\n aero-reboot-update.py -f\n\n\n\n\n\nAfter seeing the message that the system is rebooting, rapidly connect the USB\ndrive so the system can reboot into it.\n\n\nBefore v1.2\n\n\nBefore version 1.2 the command \naero-reboot-update.py\n used on the previous\nsections didn't exist. You will need to manually access the USB drive to\nexecute that command directly from the new OS image.\n\n\n#\n mkdir -p /tmp/\n{\niso,newroot\n}\n\n\n#\n mount -o ro /dev/sda1 /tmp/iso\n\n#\n mount -o loop,ro /tmp/iso/rootfs.img /tmp/newroot\n\n#\n /tmp/newroot/usr/sbin/aero-reboot-update.py\n\n\n\n\n\nJust like on \nv1.2 (or greater) via USB\n you should\npass the \n-f\n flag to the last command if you are connected via USB.\n\n\nStatus progress\n\n\nThe updated process gives feedback to the user in some forms:\n\n\n\n\nIf you have an HDMI screen connected, you will see the progress of the\n   update as text on it\n\n\n\n\nInternal RGB LED on Compute Board will blink according to the different\n   phases:\n\n\n\n\nWhen the board is turned on the LED is green\n\n\nBefore rebooting the RGB LED will become yellow: this means the board\n   started the reboot progress. It takes around 20 seconds for this\n   command to take effect and thus change from yellow to green again.\n   If the BIOS version is older than 1.00.12, the reboot command may get\n   stuck. You can safely remove power and power it on again if that happens:\n   it will proceed with the update process\n\n\nWhen board is rebooted the RGB LED becomes green again\n\n\nDuring the update process the RGB LED will blink red once a second (1Hz).\n   The time taken by the update process may vary, but should take around 3\n   minutes.\n\n\nWhen the Compute Board is updated the RGB LED will blink fast at 10Hz for\n   5 seconds and reboot. After that the update process is done and you should\n   be greeted with the new version\n\n\n\n\n\n\n\n\nOn the RTF kit there are additional blue LEDs next to the power button. They\n   will follow the same blink pattern as above with the exception that they don't\n   change color\n\n\n\n\n\n\n\n\nTip\n\n\nOn the RTF kit it may be difficult to see the internal RGB LED. You can look\nto the hole through each the FAN cable is passing in order to\ncheck it's. See the image below for reference. You can also use your hand\nputting it near to the hole to reflect the light and monitor the progress.\n\n\n\n\n\n\nBIOS\n\n\nThe BIOS update works by installing the downloaded package \nrpm\n package. This\nwill install the update file that will be used on next boot to update it. You\nneed to follow these steps:\n\n\n\n\nCopy the file to Aero Compute Board: you may use \nscp\n or \nrsync\n. Example:\n\n\n\n\n$\n scp ~/Downloads/capsule-01.00.12-r0.core2_64.rpm intel-aero.local:\n\n\n\n\n\n\n\nInstall and reboot\n\n\n\n\n#\n dnf install capsule-01.00.12-r0.core2_64.rpm\n\n#\n reboot\n\n\n\n\n\nDuring the next boot the BIOS will detect the update and flash the new version.\nIf you have HDMI output connected you can see the update progress. After\nlogging in again, check the current version \nas above\n\nto make sure everything worked.\n\n\nFPGA\n\n\nThe OS image comes with the recommended versions of the FPGA firmware, but during\nthe install process it doesn't flash it automatically since the user may choose\nwhat version to use depending on his needs and also can modify and have his own\nfirmware: the \nFPGA source\n\nis open source too. Check the available versions of the fpga under \n/etc/fpga/\n:\n\n\n\n\naero-rtf.jam\n: this is for use with RTF kit during normal operation\n\n\naero-rtf-recovery.jam\n: this is for use with the RTF kit under special\n  circunstances: it allows the Compute Board to instruct the Flight Controller\n  to stop on bootloader so we can flash new versions of the firmware even if\n  the previous version stopped responding due to a bad update\n\n\naero-compute-board.jam\n: this should be selected if using only the Compute\n  Board and not the Flight Controller. Note that the labels that accompany\n  the Compute Board have no meaning. Check the official documentation for\n  what each pin is connected to.\n\n\n\n\nYou can flash the FPGA with the command below in which \nfirmware\n is one of\nthe firmwares above.\n\n\n#\n jam -aprogram /etc/fpga/\nfirmware\n.jam\n\n\n\n\n\nFlight Controller\n\n\nThis only applies to the RTF kit since the Compute Board doesn't come with\nthe flight controller which is called \naerofc\n. The RTF kit comes\npre-flashed and calibrated with PX4, but it's recommended to update to the\nsame version that comes in the OS image to get the latest improvements.\n\n\nThe current version of OS image comes with both PX4 and ArduPilot firmwares\nand the user can choose which one he prefers. They are located in \n/etc/aerofc/\n.\nCommands below illustrate how to flash each of them:\n\n\nPX4:\n\n\n#\n aerofc-update.sh /etc/aerofc/px4/nuttx-aerofc-v1-default.px4\n\n\n\n\n\nArduPilot:\n\n\n#\n aerofc-update.sh /etc/aerofc/ardupilot/arducopter-aerofc-v1.px4\n\n\n\n\n\nAfter this command the flight controller (not the Compute Board) is\nautomatically rebooted with the new firmware.\n\n\nFlight stack developers may want to flash the current version being developed\nrather than the stable version that comes with the OS image. For that it's\nrecommended to follow the steps from each of them: \nPX4\n\nand \nArduPilot\n.", 
            "title": "Update"
        }, 
        {
            "location": "/getting-started/update/#update-intel-aero-software", 
            "text": "The Intel Aero Compute Board and the RTF Kit comes already flashed from factory\nand ready to use. The version may vary and it's recommended for developers to\nupdate to the last available version.  There are 4 main components that may need to be updated:\nOperating System, BIOS, FPGA, Flight Controller (aerofc).", 
            "title": "Update Intel Aero software"
        }, 
        {
            "location": "/getting-started/update/#check-current-version", 
            "text": "In order to know what needs to be updated you may check what's already\ncurrently installed on your board. Connect to the board via WiFi or USB\nand use the following command on the terminal:  #  aero-get-version.py BIOS_VERSION = Aero-01.00.12_Prod  OS_VERSION = v1.4  AIRMAP_VERSION = 1.8  FPGA_VERSION = 0xc0   This should show the 3 important versions: OS, BIOS and FPGA. The flight\ncontroller currently doesn't report its version this way.", 
            "title": "Check current version"
        }, 
        {
            "location": "/getting-started/update/#download", 
            "text": "The last software version can be downloaded from Intel's Download Center .\nYou will need to download the \"Operating system image\" and the \"Capsule/BIOS\"\nfrom that page.   Tip  The Operating system image is updated much more frequently than the BIOS.\nIf you already have the last BIOS flashed you don't need to download and\nflash it again. See  Check current version  for instructions on how to check version\ncurrently installed.   As of this writting the OS Image is at version 1.4 and the BIOS at version\n1.00.12. After downloading it's advised to check if the download was successful\nby checking its md5sum. It must match the md5sum published on the Download Center.", 
            "title": "Download"
        }, 
        {
            "location": "/getting-started/update/#check-md5sum", 
            "text": "", 
            "title": "Check md5sum"
        }, 
        {
            "location": "/getting-started/update/#linux-and-macos", 
            "text": "Open a terminal and execute the following command below. The md5sum can be seen\nin the line following it.  $  md5sum ~/Downloads/intel-aero-image-1.4.iso 9a1706addd08eb8bea3a4e6dbc58b724 /home/ user /Downloads/intel-aero-image-1.4.iso   The command above assumes the download has been done to your Downloads directory,\nwhich is usually the default location but may vary across distros.", 
            "title": "Linux and macOS"
        }, 
        {
            "location": "/getting-started/update/#windows", 
            "text": "You will need to download and install  Win32 Disk Imager .\nThis software can also be used later below if you are following the Windows-specific\ninstructions. See picture below that contains the \"MD5 hash\" for an earlier\nversion of the OS image.", 
            "title": "Windows"
        }, 
        {
            "location": "/getting-started/update/#write-os-image-to-usb-drive", 
            "text": "The method to write the image to the USB drive will depend on what Operating\nSystem you are using. Below you can find options that work on each of Linux,\nWindows and macOS.", 
            "title": "Write OS image to USB drive"
        }, 
        {
            "location": "/getting-started/update/#linux-windows-and-macos", 
            "text": "Follow these steps:   Download and install  Etcher . follow specific instructions\n  on their website for installation  Launch Etcher  Select the downloaded OS image file  Select the USB drive where it will be written to  Click on \"Flash\" button   Wait for the image to be written and verified.", 
            "title": "Linux, Windows and macOS"
        }, 
        {
            "location": "/getting-started/update/#linux-and-macos-alternative", 
            "text": "It's possible to use the command line to write the image to a USB drive as\nbelow. Note that the letter  X  below should be replaced by the letter of\nyour USB drive (be careful not to use the wrong drive since it can overwrite\nyour main disk).  dd  if = ~/Downloads/intel-aero-image-1.4.iso  of = /dev/sdX  bs = 1M", 
            "title": "Linux and macOS (alternative)"
        }, 
        {
            "location": "/getting-started/update/#windows-alternative", 
            "text": "If you are using this method, you need to use Win32 Disk Imager\nas detailed in  Check md5sum  section. After checking the\ndownload is correct proceed with the following steps:   Select your USB drive  Click on \"Write\" button", 
            "title": "Windows (alternative)"
        }, 
        {
            "location": "/getting-started/update/#flash-os-image", 
            "text": "In order to flash a new OS image you can connect to it either via\nWiFi or USB. Since the USB port will be needed to connect the USB drive\nit's recommended to use WiFi though. Follow the instructions on  XXXXX  to\nconnect establish the network connection and connect via ssh. The commands\nbelow assume you are already connected to the Compute Board.  Based on the version you  currently  have installed on the Compute Board the\nmethod varies since recent versions are always improving the process.", 
            "title": "Flash OS image"
        }, 
        {
            "location": "/getting-started/update/#v12-or-greater-via-wifi", 
            "text": "Just one command is needed:  #  aero-reboot-update.py  This will verify you have a new OS image on the USB drive and reboot in update\nmode.", 
            "title": "v1.2 (or greater) via WiFi"
        }, 
        {
            "location": "/getting-started/update/#v12-or-greater-via-usb", 
            "text": "If you are connected via USB you have to bypass the check done by the command\non the previous section since the USB is being used for usb-ethernet connection:  #  aero-reboot-update.py -f  After seeing the message that the system is rebooting, rapidly connect the USB\ndrive so the system can reboot into it.", 
            "title": "v1.2 (or greater) via USB"
        }, 
        {
            "location": "/getting-started/update/#before-v12", 
            "text": "Before version 1.2 the command  aero-reboot-update.py  used on the previous\nsections didn't exist. You will need to manually access the USB drive to\nexecute that command directly from the new OS image.  #  mkdir -p /tmp/ { iso,newroot }  #  mount -o ro /dev/sda1 /tmp/iso #  mount -o loop,ro /tmp/iso/rootfs.img /tmp/newroot #  /tmp/newroot/usr/sbin/aero-reboot-update.py  Just like on  v1.2 (or greater) via USB  you should\npass the  -f  flag to the last command if you are connected via USB.", 
            "title": "Before v1.2"
        }, 
        {
            "location": "/getting-started/update/#status-progress", 
            "text": "The updated process gives feedback to the user in some forms:   If you have an HDMI screen connected, you will see the progress of the\n   update as text on it   Internal RGB LED on Compute Board will blink according to the different\n   phases:   When the board is turned on the LED is green  Before rebooting the RGB LED will become yellow: this means the board\n   started the reboot progress. It takes around 20 seconds for this\n   command to take effect and thus change from yellow to green again.\n   If the BIOS version is older than 1.00.12, the reboot command may get\n   stuck. You can safely remove power and power it on again if that happens:\n   it will proceed with the update process  When board is rebooted the RGB LED becomes green again  During the update process the RGB LED will blink red once a second (1Hz).\n   The time taken by the update process may vary, but should take around 3\n   minutes.  When the Compute Board is updated the RGB LED will blink fast at 10Hz for\n   5 seconds and reboot. After that the update process is done and you should\n   be greeted with the new version     On the RTF kit there are additional blue LEDs next to the power button. They\n   will follow the same blink pattern as above with the exception that they don't\n   change color     Tip  On the RTF kit it may be difficult to see the internal RGB LED. You can look\nto the hole through each the FAN cable is passing in order to\ncheck it's. See the image below for reference. You can also use your hand\nputting it near to the hole to reflect the light and monitor the progress.", 
            "title": "Status progress"
        }, 
        {
            "location": "/getting-started/update/#bios", 
            "text": "The BIOS update works by installing the downloaded package  rpm  package. This\nwill install the update file that will be used on next boot to update it. You\nneed to follow these steps:   Copy the file to Aero Compute Board: you may use  scp  or  rsync . Example:   $  scp ~/Downloads/capsule-01.00.12-r0.core2_64.rpm intel-aero.local:   Install and reboot   #  dnf install capsule-01.00.12-r0.core2_64.rpm #  reboot  During the next boot the BIOS will detect the update and flash the new version.\nIf you have HDMI output connected you can see the update progress. After\nlogging in again, check the current version  as above \nto make sure everything worked.", 
            "title": "BIOS"
        }, 
        {
            "location": "/getting-started/update/#fpga", 
            "text": "The OS image comes with the recommended versions of the FPGA firmware, but during\nthe install process it doesn't flash it automatically since the user may choose\nwhat version to use depending on his needs and also can modify and have his own\nfirmware: the  FPGA source \nis open source too. Check the available versions of the fpga under  /etc/fpga/ :   aero-rtf.jam : this is for use with RTF kit during normal operation  aero-rtf-recovery.jam : this is for use with the RTF kit under special\n  circunstances: it allows the Compute Board to instruct the Flight Controller\n  to stop on bootloader so we can flash new versions of the firmware even if\n  the previous version stopped responding due to a bad update  aero-compute-board.jam : this should be selected if using only the Compute\n  Board and not the Flight Controller. Note that the labels that accompany\n  the Compute Board have no meaning. Check the official documentation for\n  what each pin is connected to.   You can flash the FPGA with the command below in which  firmware  is one of\nthe firmwares above.  #  jam -aprogram /etc/fpga/ firmware .jam", 
            "title": "FPGA"
        }, 
        {
            "location": "/getting-started/update/#flight-controller", 
            "text": "This only applies to the RTF kit since the Compute Board doesn't come with\nthe flight controller which is called  aerofc . The RTF kit comes\npre-flashed and calibrated with PX4, but it's recommended to update to the\nsame version that comes in the OS image to get the latest improvements.  The current version of OS image comes with both PX4 and ArduPilot firmwares\nand the user can choose which one he prefers. They are located in  /etc/aerofc/ .\nCommands below illustrate how to flash each of them:  PX4:  #  aerofc-update.sh /etc/aerofc/px4/nuttx-aerofc-v1-default.px4  ArduPilot:  #  aerofc-update.sh /etc/aerofc/ardupilot/arducopter-aerofc-v1.px4  After this command the flight controller (not the Compute Board) is\nautomatically rebooted with the new firmware.  Flight stack developers may want to flash the current version being developed\nrather than the stable version that comes with the OS image. For that it's\nrecommended to follow the steps from each of them:  PX4 \nand  ArduPilot .", 
            "title": "Flight Controller"
        }, 
        {
            "location": "/getting-started/flying/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for basic/flying.md", 
            "title": "Flying"
        }, 
        {
            "location": "/getting-started/camera/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for basic/camera.md", 
            "title": "Camera"
        }, 
        {
            "location": "/dev/dev/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/dev.md", 
            "title": "Intro"
        }, 
        {
            "location": "/dev/flight-stacks/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/flight-stacks.md", 
            "title": "Flight Stacks"
        }, 
        {
            "location": "/dev/container/container/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/container/container.md", 
            "title": "Intro"
        }, 
        {
            "location": "/dev/container/setup/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/container/setup.md", 
            "title": "Setup"
        }, 
        {
            "location": "/dev/container/workflow/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/container/workflow.md", 
            "title": "Workflow"
        }, 
        {
            "location": "/dev/container/deploy/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/container/deploy.md", 
            "title": "Deploy"
        }, 
        {
            "location": "/dev/app/app/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/app/app.md", 
            "title": "Intro"
        }, 
        {
            "location": "/dev/app/pymavlink/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/app/pymavlink.md", 
            "title": "Pymavlink"
        }, 
        {
            "location": "/dev/app/mavlink/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/app/mavlink.md", 
            "title": "Mavlink"
        }, 
        {
            "location": "/dev/app/dronekit/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/app/dronekit.md", 
            "title": "Dronekit"
        }, 
        {
            "location": "/dev/app/ros/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/app/ros.md", 
            "title": "ROS"
        }, 
        {
            "location": "/dev/camera/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/camera.md", 
            "title": "Camera"
        }, 
        {
            "location": "/dev/yocto/yocto/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/yocto/yocto.md", 
            "title": "Intro"
        }, 
        {
            "location": "/dev/yocto/add-preexistent-package/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/yocto/add-preexistent-package.md", 
            "title": "Add a pre-existent package"
        }, 
        {
            "location": "/dev/yocto/package-own-application/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/yocto/package-own-application.md", 
            "title": "Package own application"
        }, 
        {
            "location": "/dev/yocto/work-with-kernel/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/yocto/work-with-kernel.md", 
            "title": "Work with Kernel"
        }, 
        {
            "location": "/dev/coav/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for dev/coav.md", 
            "title": "Collision Avoidance"
        }, 
        {
            "location": "/hw/info/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for hw/info.md", 
            "title": "Info and Architecture"
        }, 
        {
            "location": "/hw/mods/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for hw/mods.md", 
            "title": "Mods"
        }, 
        {
            "location": "/sw/info/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for sw/info.md", 
            "title": "Info and Architecture"
        }, 
        {
            "location": "/contributions/documentation/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for contributions/documentation.md", 
            "title": "Documentation"
        }, 
        {
            "location": "/contributions/app/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for contributions/app.md", 
            "title": "Applications"
        }, 
        {
            "location": "/contributions/yocto/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for contributions/yocto.md", 
            "title": "Yocto Project"
        }, 
        {
            "location": "/contributions/container/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for contributions/container.md", 
            "title": "Container Images"
        }, 
        {
            "location": "/troubleshooting/", 
            "text": "Warning\n\n\nThis is just a skeleton page to be replaced later\n\n\n\n\nAdd documentation for troubleshooting.md", 
            "title": "Troubleshooting"
        }
    ]
}